env:
  CANDIDATE_VERSIONS: ' spring.version:5.3.24; spring-boot.version:2.7.6; '
  FAIL_FAST: 0
  FORK_COUNT: 2
  JACOCO_ENABLE: true
  SHOW_ERROR_DETAIL: 1
  VERSIONS_LIMIT: 4
jobs:
  build-source:
    name: Build Dubbo
    needs: check-format
    outputs:
      version: ${{ steps.dubbo-version.outputs.version }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        path: dubbo
    - continue-on-error: true
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 8
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ github.run_id
          }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-${{ hashFiles(''**/pom.xml'') }}

          ${{ runner.os }}-maven-

          '
    - continue-on-error: true
      name: Dubbo cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-dubbo-snapshot-${{ github.sha }}-${{ github.run_id }}
        path: ~/.m2/repository/org/apache/dubbo
    - continue-on-error: true
      name: Build Dubbo with Maven
      run: 'cd ./dubbo

        ./mvnw --batch-mode --no-snapshot-updates -e --no-transfer-progress --fail-fast
        clean source:jar install -Pjacoco,checkstyle -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
        -Dmaven.wagon.http.retryHandler.count=5 -Dmaven.test.skip=true -Dmaven.test.skip.exec=true
        -DembeddedZookeeperPath=${{ github.workspace }}/.tmp/zookeeper

        '
    - continue-on-error: true
      name: Pack class result
      run: 'shopt -s globstar

        zip ${{ github.workspace }}/class.zip **/target/classes/* -r

        '
    - continue-on-error: true
      name: Upload class result
      uses: actions/upload-artifact@v3
      with:
        name: class-file
        path: ${{ github.workspace }}/class.zip
    - continue-on-error: true
      if: failure()
      name: Pack checkstyle file if failure
      run: zip ${{ github.workspace }}/checkstyle.zip *checkstyle* -r
    - continue-on-error: true
      if: failure()
      name: Upload checkstyle file if failure
      uses: actions/upload-artifact@v3
      with:
        name: checkstyle-file
        path: ${{ github.workspace }}/checkstyle.zip
    - continue-on-error: true
      id: dubbo-version
      name: Calculate Dubbo Version
      run: 'REVISION=`awk ''/<revision>[^<]+<\/revision>/{gsub(/<revision>|<\/revision>/,"",$1);print
        $1;exit;}'' ./dubbo/pom.xml`

        echo "version=$REVISION" >> $GITHUB_OUTPUT

        echo "dubbo version: $REVISION"

        '
  check-format:
    name: Check if code needs formatting
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Setup Maven
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 21
    - continue-on-error: true
      id: check
      name: Check if code aligns with code style
      run: mvn --log-file mvn.log spotless:check
    - continue-on-error: true
      name: Upload checkstyle result
      uses: actions/upload-artifact@v4
      with:
        name: checkstyle-result
        path: mvn.log
    - continue-on-error: true
      if: ${{ steps.check.outcome == 'success' }}
      name: Generate Summary for successful run
      run: 'echo ":ballot_box_with_check: Kudos! No formatting issues found!" >> $GITHUB_STEP_SUMMARY

        '
    - continue-on-error: true
      if: ${{ steps.check.outcome == 'failure' }}
      name: Generate Summary for failed run
      run: 'echo "## :negative_squared_cross_mark: Formatting issues found!" >> $GITHUB_STEP_SUMMARY

        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

        cat mvn.log | grep "ERROR" | sed ''s/Check if code needs formatting    Check
        if code aligns with code style   [0-9A-Z:.-]\+//'' | sed ''s/\[ERROR] //''
        | head -n -11 >> $GITHUB_STEP_SUMMARY

        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

        echo "Please run \`mvn spotless:apply\` to fix the formatting issues." >>
        $GITHUB_STEP_SUMMARY

        '
    - continue-on-error: true
      if: ${{ steps.check.outcome == 'failure' }}
      name: Fail if code needs formatting
      uses: actions/github-script@v7.0.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: 'core.setFailed("Formatting issues found!")

          '
  error-code-inspecting:
    needs: check-format
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        path: ./dubbo
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        path: ./dubbo-test-tools
        ref: main
        repository: apache/dubbo-test-tools
    - continue-on-error: true
      name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 21
    - continue-on-error: true
      name: Compile Dubbo (Linux)
      run: 'cd ${{ github.workspace }}/dubbo

        ./mvnw --batch-mode --no-snapshot-updates -e --no-transfer-progress --fail-fast
        -T 2C clean install -DskipTests=true -DskipIntegrationTests=true -Dcheckstyle.skip=true
        -Dcheckstyle_unix.skip=true -Drat.skip=true -Dmaven.javadoc.skip=true

        '
    - continue-on-error: true
      env:
        DUBBO_ECI_REPORT_AS_ERROR: true
      name: Run Error Code Inspecting
      run: 'cd ${{ github.workspace }}/dubbo-test-tools/dubbo-error-code-inspector

        ../mvnw --batch-mode --no-snapshot-updates -e --no-transfer-progress --fail-fast
        -T 2C package exec:java -Ddubbo.eci.report-as-error=${DUBBO_ECI_REPORT_AS_ERROR}
        -Dmaven.test.skip=true -Dmaven.test.skip.exec=true -Ddubbo.eci.path=${{ github.workspace
        }}/dubbo

        '
    - continue-on-error: true
      if: ${{ success() || failure() }}
      name: Upload error code inspection result
      uses: actions/upload-artifact@v3
      with:
        name: error-inspection-result
        path: ${{ github.workspace }}/dubbo-test-tools/dubbo-error-code-inspector/error-inspection-result.txt
  integration-test-job:
    env:
      JAVA_VER: 8
      TEST_CASE_FILE: jobs/testjob_${{matrix.job_id}}.txt
    name: 'Integration Test on ubuntu-latest (JobId: ${{matrix.job_id}})'
    needs:
    - check-format
    - build-source
    - integration-test-prepare
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        ref: main
        repository: apache/dubbo-integration-cases
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ github.run_id
          }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-${{ hashFiles(''**/pom.xml'') }}

          ${{ runner.os }}-maven-

          '
    - continue-on-error: true
      name: Restore Dubbo cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-dubbo-snapshot-${{ github.sha }}-${{ github.run_id }}
        path: ~/.m2/repository/org/apache/dubbo
        restore-keys: '${{ runner.os }}-dubbo-snapshot-${{ github.sha }}

          ${{ runner.os }}-dubbo-snapshot-

          '
    - continue-on-error: true
      name: Download test list
      uses: actions/download-artifact@v3
      with:
        name: test-list
        path: test/jobs/
    - continue-on-error: true
      name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 8
    - continue-on-error: true
      name: Init Candidate Versions
      run: 'DUBBO_VERSION="${{needs.build-source.outputs.version}}"

        CANDIDATE_VERSIONS="dubbo.version:$DUBBO_VERSION;compiler.version:$DUBBO_VERSION;$CANDIDATE_VERSIONS;dubbo.compiler.version:$DUBBO_VERSION"

        echo "CANDIDATE_VERSIONS=$CANDIDATE_VERSIONS" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Build test image
      run: 'cd test && bash ./build-test-image.sh

        '
    - continue-on-error: true
      name: Run tests
      run: cd test && bash ./run-tests.sh
    - continue-on-error: true
      name: merge jacoco resule
      run: 'cd test/dubbo-test-jacoco-merger && mvn clean compile exec:java -Dexec.mainClass="org.apache.dubbo.test.JacocoMerge"
        -Dexec.args="${{github.workspace}}"

        '
    - continue-on-error: true
      name: Upload jacoco
      uses: actions/upload-artifact@v3
      with:
        name: jacoco-result
        path: target/jacoco*.exec
    - continue-on-error: true
      if: always()
      name: Upload test result
      uses: actions/upload-artifact@v3
      with:
        name: test-result
        path: test/jobs/*-result*
    strategy:
      fail-fast: false
      matrix:
        job_id:
        - 1
        - 2
        - 3
    timeout-minutes: 90
  integration-test-prepare:
    env:
      JOB_COUNT: 3
    needs: check-format
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        ref: main
        repository: apache/dubbo-integration-cases
    - continue-on-error: true
      name: Prepare test list
      run: 'bash ./test/scripts/prepare-test.sh

        '
    - continue-on-error: true
      name: Upload test list
      uses: actions/upload-artifact@v3
      with:
        name: test-list
        path: test/jobs
  integration-test-result:
    env:
      JAVA_VER: 8
    if: always()
    needs:
    - check-format
    - integration-test-job
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        ref: main
        repository: apache/dubbo-integration-cases
    - continue-on-error: true
      name: Download test result
      uses: actions/download-artifact@v3
      with:
        name: test-result
        path: test/jobs/
    - continue-on-error: true
      name: Merge test result
      run: ./test/scripts/merge-test-results.sh
  jacoco-result-merge:
    needs:
    - check-format
    - integration-test-result
    - samples-test-result
    - unit-test
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        path: ./dubbo
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        path: ./dubbo-samples
        repository: apache/dubbo-samples
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        path: ./dubbo-integration-cases
        repository: apache/dubbo-integration-cases
    - continue-on-error: true
      name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 21
    - continue-on-error: true
      name: Restore class result
      uses: actions/download-artifact@v3
      with:
        name: class-file
        path: ${{ github.workspace }}
    - continue-on-error: true
      name: Unpack class result
      run: 'cd ${{ github.workspace }}/dubbo

        unzip -o ${{ github.workspace }}/class.zip

        '
    - continue-on-error: true
      name: Restore jacoco exec
      uses: actions/download-artifact@v3
      with:
        name: samples-jacoco-result
        path: dubbo-samples/target/
    - continue-on-error: true
      name: Restore integration jacoco exec
      uses: actions/download-artifact@v3
      with:
        name: jacoco-result
        path: dubbo-integration-cases/target/
    - continue-on-error: true
      name: Merge jacoco result
      run: 'cd ${{ github.workspace }}/dubbo-samples/test/dubbo-test-jacoco-merger

        mvn clean compile exec:java -Dexec.mainClass="org.apache.dubbo.test.JacocoReport"
        -Dexec.args="${{github.workspace}}/dubbo-samples ${{github.workspace}}/dubbo"

        '
    - continue-on-error: true
      name: Merge samples jacoco result
      run: 'cd ${{ github.workspace }}/dubbo-integration-cases/test/dubbo-test-jacoco-merger

        mvn clean compile exec:java -Dexec.mainClass="org.apache.dubbo.test.JacocoReport"
        -Dexec.args="${{github.workspace}}/dubbo-integration-cases ${{github.workspace}}/dubbo"

        '
    - continue-on-error: true
      name: Restore coverage result
      uses: actions/download-artifact@v3
      with:
        name: coverage-result
        path: dubbo/
    - continue-on-error: true
      name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        verbose: true
  license:
    name: Check License
    needs: check-format
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Check License
      uses: apache/skywalking-eyes@e1a02359b239bd28de3f6d35fdc870250fa513d5
    - continue-on-error: true
      name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 21
    - continue-on-error: true
      name: Compile Dubbo (Linux)
      run: './mvnw --batch-mode --no-snapshot-updates -e --no-transfer-progress --fail-fast
        -T 2C clean install -DskipTests=true -DskipIntegrationTests=true -Dcheckstyle.skip=true
        -Dcheckstyle_unix.skip=true -Drat.skip=true -Dmaven.javadoc.skip=true

        '
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Check Dependencies' License
      uses: apache/skywalking-eyes/dependency@e1a02359b239bd28de3f6d35fdc870250fa513d5
      with:
        config: .licenserc.yaml
        mode: check
  native-image-inspecting:
    needs: check-format
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        path: ./dubbo
    - continue-on-error: true
      name: Setup GraalVM environment
      uses: graalvm/setup-graalvm@v1
      with:
        components: native-image
        github-token: ${{ secrets.GITHUB_TOKEN }}
        java-version: '17'
        native-image-job-reports: 'true'
        version: 22.3.0
    - continue-on-error: true
      name: Setup Zookeeper environment
      run: 'wget https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz

        tar -zxvf apache-zookeeper-3.8.4-bin.tar.gz

        mv apache-zookeeper-3.8.4-bin/conf/zoo_sample.cfg apache-zookeeper-3.8.4-bin/conf/zoo.cfg

        apache-zookeeper-3.8.4-bin/bin/zkServer.sh start

        '
    - continue-on-error: true
      name: Check environment
      run: 'java --version

        native-image --version

        '
    - continue-on-error: true
      name: Compile Dubbo (Linux)
      run: 'cd ${{ github.workspace }}/dubbo

        ./mvnw --batch-mode --no-snapshot-updates -e --no-transfer-progress --fail-fast
        -T 2C clean install -DskipTests=true -DskipIntegrationTests=true -Dcheckstyle.skip=true
        -Dcheckstyle_unix.skip=true -Drat.skip=true -Dmaven.javadoc.skip=true

        '
    - continue-on-error: true
      name: Compile and run Dubbo demo for native (Linux)
      run: 'cd ${{ github.workspace }}/dubbo/dubbo-demo/dubbo-demo-native/dubbo-demo-native-provider

        ${{ github.workspace }}/dubbo/mvnw --batch-mode --no-snapshot-updates -e --no-transfer-progress
        --fail-fast -T 2C clean package -P native -Dmaven.test.skip=true native:compile

        nohup ./target/dubbo-demo-native-provider &

        cd ${{ github.workspace }}/dubbo/dubbo-demo/dubbo-demo-native/dubbo-demo-native-consumer

        ${{ github.workspace }}/dubbo/mvnw --batch-mode --no-snapshot-updates -e --no-transfer-progress
        --fail-fast -T 2C clean package -P native -Dmaven.test.skip=true native:compile

        ./target/dubbo-demo-native-consumer

        '
  samples-test-job:
    env:
      JAVA_VER: 8
      TEST_CASE_FILE: jobs/testjob_${{matrix.job_id}}.txt
    name: 'Samples Test on ubuntu-latest (JobId: ${{matrix.job_id}})'
    needs:
    - check-format
    - build-source
    - samples-test-prepare
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        ref: master
        repository: apache/dubbo-samples
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ github.run_id
          }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-${{ hashFiles(''**/pom.xml'') }}

          ${{ runner.os }}-maven-

          '
    - continue-on-error: true
      name: Restore Dubbo cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-dubbo-snapshot-${{ github.sha }}-${{ github.run_id }}
        path: ~/.m2/repository/org/apache/dubbo
        restore-keys: '${{ runner.os }}-dubbo-snapshot-${{ github.sha }}

          ${{ runner.os }}-dubbo-snapshot-

          '
    - continue-on-error: true
      name: Download test list
      uses: actions/download-artifact@v3
      with:
        name: samples-test-list
        path: test/jobs/
    - continue-on-error: true
      name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 8
    - continue-on-error: true
      name: Init Candidate Versions
      run: 'DUBBO_VERSION="${{needs.build-source.outputs.version}}"

        CANDIDATE_VERSIONS="dubbo.version:$DUBBO_VERSION;compiler.version:$DUBBO_VERSION;$CANDIDATE_VERSIONS;dubbo.compiler.version:$DUBBO_VERSION"

        echo "CANDIDATE_VERSIONS=$CANDIDATE_VERSIONS" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Build test image
      run: 'cd test && bash ./build-test-image.sh

        '
    - continue-on-error: true
      name: Run tests
      run: cd test && bash ./run-tests.sh
    - continue-on-error: true
      name: merge jacoco resule
      run: 'cd test/dubbo-test-jacoco-merger && mvn clean compile exec:java -Dexec.mainClass="org.apache.dubbo.test.JacocoMerge"
        -Dexec.args="${{github.workspace}}"

        '
    - continue-on-error: true
      name: Upload jacoco
      uses: actions/upload-artifact@v3
      with:
        name: samples-jacoco-result
        path: target/jacoco*.exec
    - continue-on-error: true
      if: always()
      name: Upload test result
      uses: actions/upload-artifact@v3
      with:
        name: samples-test-result
        path: test/jobs/*-result*
    strategy:
      fail-fast: false
      matrix:
        job_id:
        - 1
        - 2
        - 3
    timeout-minutes: 90
  samples-test-prepare:
    env:
      JOB_COUNT: 3
    needs: check-format
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        ref: master
        repository: apache/dubbo-samples
    - continue-on-error: true
      name: Prepare test list
      run: 'bash ./test/scripts/prepare-test.sh

        '
    - continue-on-error: true
      name: Upload test list
      uses: actions/upload-artifact@v3
      with:
        name: samples-test-list
        path: test/jobs
  samples-test-result:
    env:
      JAVA_VER: 8
    if: always()
    needs:
    - check-format
    - samples-test-job
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        ref: master
        repository: apache/dubbo-samples
    - continue-on-error: true
      name: Download test result
      uses: actions/download-artifact@v3
      with:
        name: samples-test-result
        path: test/jobs/
    - continue-on-error: true
      name: Merge test result
      run: ./test/scripts/merge-test-results.sh
  unit-test:
    env:
      CURRENT_ROLE: ${{ matrix.case-role }}
      DISABLE_FILE_SYSTEM_TEST: true
      DUBBO_DEFAULT_SERIALIZATION: fastjson2
    name: Unit Test On ubuntu-latest
    needs:
    - check-format
    - build-source
    - unit-test-prepare
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - continue-on-error: true
      name: Set up JDK ${{ matrix.jdk }}
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 21
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ github.run_id
          }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-${{ hashFiles(''**/pom.xml'') }}

          ${{ runner.os }}-maven-

          '
    - continue-on-error: true
      id: cache-zookeeper
      name: Cache zookeeper binary archive
      uses: actions/cache@v3
      with:
        key: zookeeper-${{ runner.os }}-${{ env.ZOOKEEPER_VERSION }}
        path: ${{ github.workspace }}/.tmp/zookeeper
        restore-keys: 'zookeeper-${{ runner.os }}-

          '
    - continue-on-error: true
      id: cache-secret-cert
      name: Cache secret key
      uses: actions/cache@v3
      with:
        key: secret-rsa-${{ runner.os }}-${{ github.run_id }}
        path: ${{ github.workspace }}/.tmp/rsa
    - continue-on-error: true
      if: ${{ github.repository == 'apache/dubbo' }}
      name: Get sonarcloud token
      run: 'curl "http://dubbo-vm.apache.org:8000/token?workflow_id=${{ github.run_id
        }}" -o ${{ github.workspace }}/.tmp/encrypted-sonarcloud-token

        openssl rsautl -decrypt -in ${{ github.workspace }}/.tmp/encrypted-sonarcloud-token
        -out ${{ github.workspace }}/.tmp/decrypted-sonarcloud-token -inkey ${{ github.workspace
        }}/.tmp/rsa/rsa_private.pem

        '
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.repository == 'apache/dubbo' }}
      name: Test with Maven with SonarCloud Scan
      run: 'source ${{ github.workspace }}/.tmp/decrypted-sonarcloud-token

        ./mvnw --batch-mode --no-snapshot-updates -e --no-transfer-progress --fail-fast
        clean test verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pjacoco,jdk15ge-simple,''!jdk15ge'',jacoco089
        -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=apache -Dsonar.projectKey=apache_dubbo
        -DtrimStackTrace=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
        -Dmaven.wagon.http.retryHandler.count=5 -DskipTests=false -DskipIntegrationTests=false
        -Dcheckstyle.skip=false -Dcheckstyle_unix.skip=false -Drat.skip=false -Dmaven.javadoc.skip=true
        -DembeddedZookeeperPath=${{ github.workspace }}/.tmp/zookeeper -Dsonar.coverage.jacoco.xmlReportPaths=dubbo-test/dubbo-dependencies-all/target/site/jacoco-aggregate/jacoco.xml
        -Dsonar.login=${SONAR_TOKEN}

        '
      timeout-minutes: 70
    - continue-on-error: true
      if: ${{ github.repository != 'apache/dubbo' }}
      name: Test with Maven without SonarCloud Scan
      run: './mvnw --batch-mode --no-snapshot-updates -e --no-transfer-progress --fail-fast
        clean test verify -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Pjacoco,jdk15ge-simple,''!jdk15ge'',jacoco089
        -DtrimStackTrace=false -Dmaven.wagon.http.retryHandler.count=5 -DskipTests=false
        -DskipIntegrationTests=false -Dcheckstyle.skip=false -Dcheckstyle_unix.skip=false
        -Drat.skip=false -Dmaven.javadoc.skip=true -DembeddedZookeeperPath=${{ github.workspace
        }}/.tmp/zookeeper

        '
      timeout-minutes: 70
    - continue-on-error: true
      name: Upload coverage result
      uses: actions/upload-artifact@v3
      with:
        name: coverage-result
        path: '**/target/site/**/jacoco.xml'
    strategy:
      fail-fast: false
  unit-test-prepare:
    env:
      ZOOKEEPER_VERSION: 3.6.3
    name: Preparation for Unit Test
    needs: check-format
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: cache-zookeeper
      name: Cache zookeeper binary archive
      uses: actions/cache@v3
      with:
        key: zookeeper-${{ runner.os }}-${{ env.ZOOKEEPER_VERSION }}
        path: ${{ github.workspace }}/.tmp/zookeeper
        restore-keys: 'zookeeper-${{ runner.os }}-${{ env.ZOOKEEPER_VERSION }}

          '
    - continue-on-error: true
      if: ${{ startsWith( matrix.os, 'windows') && steps.cache-zookeeper.outputs.cache-hit
        != 'true' }}
      name: Set up msys2 if necessary
      uses: msys2/setup-msys2@v2
      with:
        release: false
    - continue-on-error: true
      name: Download zookeeper binary archive in Linux OS
      run: 'mkdir -p ${{ github.workspace }}/.tmp/zookeeper

        wget -c https://archive.apache.org/dist/zookeeper/zookeeper-${{ env.ZOOKEEPER_VERSION
        }}/apache-zookeeper-${{ env.ZOOKEEPER_VERSION }}-bin.tar.gz -O ${{ github.workspace
        }}/.tmp/zookeeper/apache-zookeeper-bin.tar.gz ||

        wget -c https://apache.website-solution.net/zookeeper/zookeeper-${{ env.ZOOKEEPER_VERSION
        }}/apache-zookeeper-${{ env.ZOOKEEPER_VERSION }}-bin.tar.gz -O ${{ github.workspace
        }}/.tmp/zookeeper/apache-zookeeper-bin.tar.gz ||

        wget -c http://apache.stu.edu.tw/zookeeper/zookeeper-${{ env.ZOOKEEPER_VERSION
        }}/apache-zookeeper-${{ env.ZOOKEEPER_VERSION }}-bin.tar.gz -O ${{ github.workspace
        }}/.tmp/zookeeper/apache-zookeeper-bin.tar.gz ||

        wget -c http://ftp.jaist.ac.jp/pub/apache/zookeeper/zookeeper-${{ env.ZOOKEEPER_VERSION
        }}/apache-zookeeper-${{ env.ZOOKEEPER_VERSION }}-bin.tar.gz -O ${{ github.workspace
        }}/.tmp/zookeeper/apache-zookeeper-bin.tar.gz ||

        wget -c http://apache.mirror.cdnetworks.com/zookeeper/zookeeper-${{ env.ZOOKEEPER_VERSION
        }}/apache-zookeeper-${{ env.ZOOKEEPER_VERSION }}-bin.tar.gz -O ${{ github.workspace
        }}/.tmp/zookeeper/apache-zookeeper-bin.tar.gz ||

        wget -c http://mirror.apache-kr.org/apache/zookeeper/zookeeper-${{ env.ZOOKEEPER_VERSION
        }}/apache-zookeeper-${{ env.ZOOKEEPER_VERSION }}-bin.tar.gz -O ${{ github.workspace
        }}/.tmp/zookeeper/apache-zookeeper-bin.tar.gz

        echo "list the downloaded zookeeper binary archive"

        ls -al ${{ github.workspace }}/.tmp/zookeeper/apache-zookeeper-bin.tar.gz

        '
    - continue-on-error: true
      id: cache-secret-cert
      name: Cache secret key
      uses: actions/cache@v3
      with:
        key: secret-rsa-${{ runner.os }}-${{ github.run_id }}
        path: ${{ github.workspace }}/.tmp/rsa
    - continue-on-error: true
      name: Create Secret
      run: 'mkdir -p ${{ github.workspace }}/.tmp/rsa

        cd ${{ github.workspace }}/.tmp/rsa

        openssl genrsa -out rsa_private.pem 1024

        openssl rsa -in rsa_private.pem -pubout -out rsa_public.pem

        echo "Current workflow run id: ${{ github.run_id }}"

        echo "Start Print Rsa Public Key ---"

        cat rsa_public.pem

        echo "--- End Print Rsa Public Key"

        '
    strategy:
      fail-fast: false
name: Build and Test For PR
on:
  repository_dispatch:
    types: trigger-ga___build-and-test-pr.yml
permissions:
  contents: read
